{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Course website Learning outcomes General learning outcomes After this course, you will be able to: Initiate a course website from a repository by using github pages and mkdocs Build the infrastructure of a static website by using a yaml file Generate content for a course website including code chunks and admonitions by writing markdown Learning experiences To reach the learning outcomes we will use lectures and exercises. During exercises, you are free to discuss with other participants. During lectures, focus on the lecture only.","title":"Home"},{"location":"#course-website","text":"","title":"Course website"},{"location":"#learning-outcomes","text":"","title":"Learning outcomes"},{"location":"#general-learning-outcomes","text":"After this course, you will be able to: Initiate a course website from a repository by using github pages and mkdocs Build the infrastructure of a static website by using a yaml file Generate content for a course website including code chunks and admonitions by writing markdown","title":"General learning outcomes"},{"location":"#learning-experiences","text":"To reach the learning outcomes we will use lectures and exercises. During exercises, you are free to discuss with other participants. During lectures, focus on the lecture only.","title":"Learning experiences"},{"location":"course_schedule/","text":"","title":"Course schedule"},{"location":"exercises/","text":"Material Download the presentation Mkdocs Website Mkdocs material website Course website template on github Forking and cloning the template Go to https://github.com/sib-swiss/course_website_template , and click on Use this template : Choose the namespace in which you want to use the website template, choose a name, and initiate the new repository by finalising with Create repository from template : Now you can find the new repository at https://github.com/[NAMESPACE]/[REPONAME] . In order to clone the repository to a local directory, click on Code and copy the github address that you can use for cloning to your clipboard: After that, you open a terminal (e.g. Windows Powershell or your favourite terminal) cd to a directory you want to clone your repository in (e.g. to C:\\Users\\myname\\Documents ) and type: git clone https://github.com/ [ NAMESPACE ] / [ REPONAME ] .git # the last part can be pasted from github Serving a website locally In order to work on your website, it is convenient if you can serve it locally and directly see the effects of your work. In order to do that use the terminal to go into the repository directory, (e.g. C:\\Users\\myname\\Documents\\reponame ) and type: mkdocs serve Now type http://localhost:8000 in your favourite browser, and your website should be visible. Open the file index.md in your favourite text editor. Add some text to the page (e.g. hello world! ) and save the file. See whether your changes are passed to the locally served website. Stopping mkdocs serve After you have finished working on your website you will have to stop the serving process. Otherwise, it will continue in the background and keep port 8000 (and CPU) occupied. Stop the serving process with Ctrl + C . The file structure The total file structure of the template looks like this: . \u251c\u2500\u2500 LICENCE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 assets \u2502 \u2502 \u2514\u2500\u2500 images \u2502 \u2502 \u251c\u2500\u2500 SIB_logo.svg \u2502 \u2502 \u251c\u2500\u2500 reactions_zoom.png \u2502 \u2502 \u251c\u2500\u2500 reply_in_thread.png \u2502 \u2502 \u2514\u2500\u2500 zoom_icons.png \u2502 \u251c\u2500\u2500 course_schedule.md \u2502 \u251c\u2500\u2500 exercises.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 precourse.md \u2502 \u2514\u2500\u2500 stylesheets \u2502 \u2514\u2500\u2500 extra.css \u2514\u2500\u2500 mkdocs.yml 4 directories, 12 files The main directory contains: LICENCE : a licence file (in this case cc-by-4.0) README.md : the readme displayed at the github repository docs : a directory with all website content, including: assets : a directory everything that is not directly rendered (e.g. images, pdfs) files ending with *.md : the actual markdown files that are rendered into html stylesheets : a directory with .css file(s) for defining the website style format mkdocs.yml : a YAML file that is used by mkdocs in which you specify: Website structure Meta information Plugins Setting up the website infrastructure Open mkdocs.yml in your favourite text editor. Have a look at the first part: site_name : Course template nav : - Home : index.md - Precourse preparations : precourse.md - Course schedule : course_schedule.md - Exercises : exercises.md The first line ( site_name ) let\u2019s you change website name. Change it to something that makes sense to you, and check whether it has changed in the locally hosted site. With the part named nav , you can change the website structure and with that navigation. The file index.md should always be there, this is the \u2018homepage\u2019. Now we will generate a new page that is a subchapter of Exercises . In order to do so, follow the following steps: Generate a directory within the directory docs called exercises Within the exercises directory generate a new file called exercises_day1.md Adjust the nav part of mkdocs.yml like so: nav : - Home : index.md - Precourse preparations : precourse.md - Course schedule : course_schedule.md - Exercises : - Day 1 : exercises/exercises_day1.md Now a new collapsible menu will appear, containing your new page. Referring to the right repo In mkdocs.yml have a look at the repository part: # Repository repo_name : sib-swiss/course_website_template repo_url : https://github.com/sib-swiss/course_website_template The course website is now hosted at your own repository. Therefore, change the repository name and url according to your own. Markdown syntax You can use general github markdown syntax in order to generate a formatted html page. Have a look here . Now, convert the rendered text below into markdown. Add your markdown text to the file exercises_day1.md and see whether you get the expected result while you type. Rendered markdown My markdown exercise With plain markdown you can highlight in two ways: Italic Bold You can add a link to your favourite website . Or add an image from that website (find it at https://www.sib.swiss/images/banners/banner_research_infrastructure.jpg ): You can also add a local image (this one is stored in ../assets/images/zoom_icons.png ): Sharing a code is easy, inline you refer to code like this: pip install mkdocs . But often it\u2019s more convenient in a code block, e.g. with shell highlighting: FILE = my_genes.csv cat $FILE | cut -f 1 ,2 -d ',' Or with R highlighting for example: df <- read.csv ( 'my_genes.csv' ) Answer ### My markdown exercise With plain markdown you can highlight in two ways: 1. *Italic* 2. **Bold** You can add a link to your favourite [ website ]( https://www.sib.swiss/ ). Or add an image from that website (find it at `https://www.sib.swiss/images/banners/banner_research_infrastructure.jpg` ): ![](https://www.sib.swiss/images/banners/banner_research_infrastructure.jpg) You can also add a local image (this one is stored in `../assets/images/zoom_icons.png` ): ![](../assets/images/zoom_icons.png) Sharing a code is easy, inline you refer to code like this: `pip install mkdocs` . But often it's more convenient in a code block, e.g. with shell highlighting: ```sh FILE = my_genes.csv cat $FILE | cut -f 1 ,2 -d ',' ``` Or with R highlighting for example: ```r df <- read.csv ( 'my_genes.csv' ) ``` Additional features of Mkdocs material Some additional features are very convenient for generating a website for teaching. For example admonitions : code !!! warning Do not overcommit the server! output Warning Do not overcommit the server! Also very convenient can be content tabs : code: === \"R\" Generating a vector of integers: ```r a <- c(5,4,3,2,1) ``` === \"python\" Generating a list of integers: ```python a = [5,4,3,2,1] ``` output: R Generating a vector of integers: a <- c ( 5 , 4 , 3 , 2 , 1 ) python Generating a list of integers: a = [ 5 , 4 , 3 , 2 , 1 ] Mkdocs material comes with a very wide range of emoticons and icons . Use the search field in the link to search for icons. Here\u2019s an example: code Write an e-mail :material-send:, add a pdf :material-file-pdf: and wait :clock1: output Write an e-mail , add a pdf and wait You can make a button like this: code [ Download the presentation ]( ../assets/pdf/introduction_gh_pages.pdf ){: .md-button } output Download the presentation You can also add an icon to a button: code [ :fontawesome-solid-file-pdf: Download the presentation ]( ../assets/pdf/introduction_gh_pages.pdf ){: .md-button } output Download the presentation Lastly, you can incorporate html . This can particularly be convenient if you want to control the size of images. code < figure > < img src = \"../assets/images/zoom_icons.png\" width = \"300\" /> </ figure > < figure > < img src = \"../assets/images/zoom_icons.png\" width = \"100\" /> </ figure > output BYO workshop If you have brought your own course material, now you can start with generating a page containing your own course material. Host the website at github.io You can deploy your website as a github page by running the command: mkdocs gh-deploy It will become available at [NAMESPACE].github.io/[REPONAME] . This can take more than an hour if you are deploying for the first time. The next time you update your website, it will usually take less then a minute. Pushing to a remote repository The website html is created in a directory called site inside your repository directory. This directory is used to locally host the website, but usually you don\u2019t want to push it to your master branch. Therefore add it to .gitignore : echo \"site\" >> .gitignore Note Anything that is added to the file .gitignore is not added to the git repository. You have to add such files/directories only once. You can of course also open .gitignore in your favourite text editor and modify it in there. Now, you can commit your changes to your local repository like this: git commit -m 'short description' And add your commit to the repository: git add --all","title":"Exercises"},{"location":"exercises/#material","text":"Download the presentation Mkdocs Website Mkdocs material website Course website template on github","title":"Material"},{"location":"exercises/#forking-and-cloning-the-template","text":"Go to https://github.com/sib-swiss/course_website_template , and click on Use this template : Choose the namespace in which you want to use the website template, choose a name, and initiate the new repository by finalising with Create repository from template : Now you can find the new repository at https://github.com/[NAMESPACE]/[REPONAME] . In order to clone the repository to a local directory, click on Code and copy the github address that you can use for cloning to your clipboard: After that, you open a terminal (e.g. Windows Powershell or your favourite terminal) cd to a directory you want to clone your repository in (e.g. to C:\\Users\\myname\\Documents ) and type: git clone https://github.com/ [ NAMESPACE ] / [ REPONAME ] .git # the last part can be pasted from github","title":"Forking and cloning the template"},{"location":"exercises/#serving-a-website-locally","text":"In order to work on your website, it is convenient if you can serve it locally and directly see the effects of your work. In order to do that use the terminal to go into the repository directory, (e.g. C:\\Users\\myname\\Documents\\reponame ) and type: mkdocs serve Now type http://localhost:8000 in your favourite browser, and your website should be visible. Open the file index.md in your favourite text editor. Add some text to the page (e.g. hello world! ) and save the file. See whether your changes are passed to the locally served website. Stopping mkdocs serve After you have finished working on your website you will have to stop the serving process. Otherwise, it will continue in the background and keep port 8000 (and CPU) occupied. Stop the serving process with Ctrl + C .","title":"Serving a website locally"},{"location":"exercises/#the-file-structure","text":"The total file structure of the template looks like this: . \u251c\u2500\u2500 LICENCE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 assets \u2502 \u2502 \u2514\u2500\u2500 images \u2502 \u2502 \u251c\u2500\u2500 SIB_logo.svg \u2502 \u2502 \u251c\u2500\u2500 reactions_zoom.png \u2502 \u2502 \u251c\u2500\u2500 reply_in_thread.png \u2502 \u2502 \u2514\u2500\u2500 zoom_icons.png \u2502 \u251c\u2500\u2500 course_schedule.md \u2502 \u251c\u2500\u2500 exercises.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 precourse.md \u2502 \u2514\u2500\u2500 stylesheets \u2502 \u2514\u2500\u2500 extra.css \u2514\u2500\u2500 mkdocs.yml 4 directories, 12 files The main directory contains: LICENCE : a licence file (in this case cc-by-4.0) README.md : the readme displayed at the github repository docs : a directory with all website content, including: assets : a directory everything that is not directly rendered (e.g. images, pdfs) files ending with *.md : the actual markdown files that are rendered into html stylesheets : a directory with .css file(s) for defining the website style format mkdocs.yml : a YAML file that is used by mkdocs in which you specify: Website structure Meta information Plugins","title":"The file structure"},{"location":"exercises/#setting-up-the-website-infrastructure","text":"Open mkdocs.yml in your favourite text editor. Have a look at the first part: site_name : Course template nav : - Home : index.md - Precourse preparations : precourse.md - Course schedule : course_schedule.md - Exercises : exercises.md The first line ( site_name ) let\u2019s you change website name. Change it to something that makes sense to you, and check whether it has changed in the locally hosted site. With the part named nav , you can change the website structure and with that navigation. The file index.md should always be there, this is the \u2018homepage\u2019. Now we will generate a new page that is a subchapter of Exercises . In order to do so, follow the following steps: Generate a directory within the directory docs called exercises Within the exercises directory generate a new file called exercises_day1.md Adjust the nav part of mkdocs.yml like so: nav : - Home : index.md - Precourse preparations : precourse.md - Course schedule : course_schedule.md - Exercises : - Day 1 : exercises/exercises_day1.md Now a new collapsible menu will appear, containing your new page.","title":"Setting up the website infrastructure"},{"location":"exercises/#referring-to-the-right-repo","text":"In mkdocs.yml have a look at the repository part: # Repository repo_name : sib-swiss/course_website_template repo_url : https://github.com/sib-swiss/course_website_template The course website is now hosted at your own repository. Therefore, change the repository name and url according to your own.","title":"Referring to the right repo"},{"location":"exercises/#markdown-syntax","text":"You can use general github markdown syntax in order to generate a formatted html page. Have a look here . Now, convert the rendered text below into markdown. Add your markdown text to the file exercises_day1.md and see whether you get the expected result while you type. Rendered markdown","title":"Markdown syntax"},{"location":"exercises/#my-markdown-exercise","text":"With plain markdown you can highlight in two ways: Italic Bold You can add a link to your favourite website . Or add an image from that website (find it at https://www.sib.swiss/images/banners/banner_research_infrastructure.jpg ): You can also add a local image (this one is stored in ../assets/images/zoom_icons.png ): Sharing a code is easy, inline you refer to code like this: pip install mkdocs . But often it\u2019s more convenient in a code block, e.g. with shell highlighting: FILE = my_genes.csv cat $FILE | cut -f 1 ,2 -d ',' Or with R highlighting for example: df <- read.csv ( 'my_genes.csv' ) Answer ### My markdown exercise With plain markdown you can highlight in two ways: 1. *Italic* 2. **Bold** You can add a link to your favourite [ website ]( https://www.sib.swiss/ ). Or add an image from that website (find it at `https://www.sib.swiss/images/banners/banner_research_infrastructure.jpg` ): ![](https://www.sib.swiss/images/banners/banner_research_infrastructure.jpg) You can also add a local image (this one is stored in `../assets/images/zoom_icons.png` ): ![](../assets/images/zoom_icons.png) Sharing a code is easy, inline you refer to code like this: `pip install mkdocs` . But often it's more convenient in a code block, e.g. with shell highlighting: ```sh FILE = my_genes.csv cat $FILE | cut -f 1 ,2 -d ',' ``` Or with R highlighting for example: ```r df <- read.csv ( 'my_genes.csv' ) ```","title":"My markdown exercise"},{"location":"exercises/#additional-features-of-mkdocs-material","text":"Some additional features are very convenient for generating a website for teaching. For example admonitions : code !!! warning Do not overcommit the server! output Warning Do not overcommit the server! Also very convenient can be content tabs : code: === \"R\" Generating a vector of integers: ```r a <- c(5,4,3,2,1) ``` === \"python\" Generating a list of integers: ```python a = [5,4,3,2,1] ``` output: R Generating a vector of integers: a <- c ( 5 , 4 , 3 , 2 , 1 ) python Generating a list of integers: a = [ 5 , 4 , 3 , 2 , 1 ] Mkdocs material comes with a very wide range of emoticons and icons . Use the search field in the link to search for icons. Here\u2019s an example: code Write an e-mail :material-send:, add a pdf :material-file-pdf: and wait :clock1: output Write an e-mail , add a pdf and wait You can make a button like this: code [ Download the presentation ]( ../assets/pdf/introduction_gh_pages.pdf ){: .md-button } output Download the presentation You can also add an icon to a button: code [ :fontawesome-solid-file-pdf: Download the presentation ]( ../assets/pdf/introduction_gh_pages.pdf ){: .md-button } output Download the presentation Lastly, you can incorporate html . This can particularly be convenient if you want to control the size of images. code < figure > < img src = \"../assets/images/zoom_icons.png\" width = \"300\" /> </ figure > < figure > < img src = \"../assets/images/zoom_icons.png\" width = \"100\" /> </ figure > output","title":"Additional features of Mkdocs material"},{"location":"exercises/#byo-workshop","text":"If you have brought your own course material, now you can start with generating a page containing your own course material.","title":"BYO workshop"},{"location":"exercises/#host-the-website-at-githubio","text":"You can deploy your website as a github page by running the command: mkdocs gh-deploy It will become available at [NAMESPACE].github.io/[REPONAME] . This can take more than an hour if you are deploying for the first time. The next time you update your website, it will usually take less then a minute.","title":"Host the website at github.io"},{"location":"exercises/#pushing-to-a-remote-repository","text":"The website html is created in a directory called site inside your repository directory. This directory is used to locally host the website, but usually you don\u2019t want to push it to your master branch. Therefore add it to .gitignore : echo \"site\" >> .gitignore Note Anything that is added to the file .gitignore is not added to the git repository. You have to add such files/directories only once. You can of course also open .gitignore in your favourite text editor and modify it in there. Now, you can commit your changes to your local repository like this: git commit -m 'short description' And add your commit to the repository: git add --all","title":"Pushing to a remote repository"},{"location":"precourse/","text":"With this course you will be introduced in generating a course website by using mkdocs and github pages. To get you started you are asked to bring some course material of your own that you can use to start generating your own course website. This course material can be: Exercises (in pdf, commented code or markdown) Presentations (pdf or powerpoint) Other text and images You will be working on your own computer during the course. Make sure you have an account on github . Before the start of the course please install: git python (>3.5) pip (usually included in a python installation) mkdocs . Instructions here mkdocs-material . Instructions here For the impatient (that already have a git , python and pip installation): pip install mkdocs pip install mkdocs-material","title":"Precourse preparations"}]}